@startuml
class MySpotifyAuthInterceptor extends SpotifyAuthInterceptor {
    +doOnError(err: any): void
}
enum Platform {
    Deezer
    Spotify
}
class UIPlaylist {
    +coverUri: string
    +name: string
    +id: string
    +ownerId: string
    +platform: Platform
    -{static} spotifyDefaultCoverUri: "https://open.scdn.co/cdn/images/favicon.5cb2bd30.ico"
    -{static} deezerDefaultCoverUri: "https://e-cdns-files.dzcdn.net/cache/images/common/favicon/favicon.a6a53d55264841165a904dbea19d5d73.ico"
    -{static} spotifyLovedTracksId: "spotify-fav-tracks"
    -{static} deezerLovedTracksId: "deezer-fav-tracks"
    +{static} createFromSpotifyRawData(rawData: PlaylistObjectSimplified): UIPlaylist
    +{static} getLovedTracksPlaylist(platform: Platform): UIPlaylist
}
enum ShowMode {
    ShowPlaylist
    ShowSearchResult
}
class ShowTracksMessage<T> {
    +action: ShowMode
    +platform: Platform
    +parentEntity: T
}
class TracksShowMessageService {
    -messageSource: BehaviorSubject<ShowTracksMessage<UIPlaylist>>
    +currentMessage: Observable<ShowTracksMessage<UIPlaylist>>
    +callPlaylistInit(message: ShowTracksMessage<UIPlaylist>): void
}
enum MainContent {
    Hello
    Tracks
    Wizard
}
class HomeComponent implements OnInit {
    +currentContent: MainContent
    -tsms: TracksShowMessageService
    +ngOnInit(): void
    +switchMainContentTo(content: MainContent): void
}
class AppRoutingModule
class AppComponent implements OnInit {
    -tokenSvc: TokenService
    -authService: AuthService
    -router: Router
    +ngOnInit(): void
}
interface RequestResponceObject<T> {
    +body: T
    +headers: any
    +statusCode: any
}
class SpotifyUserInfoService {
    -api: SpotifyWebApi
    -apiUserUrl: "https://api.spotify.com/v1/me"
    -http: HttpClient
    +setNewtoken(token: string): void
    +fetchUserInfo(): Observable<{}>
    +fetchUserInfoNew(): Observable<CurrentUsersProfileResponse>
    +fetchUserPlaylists(): Observable<PlaylistObjectSimplified[]>
    +fetchPlaylistTracks(id: string, limit: number, offset: number): Observable<UsersSavedTracksResponse>
    +libraryContainsTrack(ids: string[]): Observable<CheckUsersSavedTracksResponse>
    +favouriteTrack(id: string): Promise<Response<SaveTracksForUserResponse>>
    +unFavouriteTrack(id: string): Promise<Response<RemoveUsersSavedTracksResponse>>
    +registerPlaylist(name: string): Observable<Response<CreatePlaylistResponse>>
    +fetchEditablePlayLists(): Observable<PlaylistObjectSimplified[]>
    +addTracksToPlaylist(pls: UIPlaylist, tracks: string[]): Promise<Response<AddTracksToPlaylistResponse>>
}
class AccountMessageService {
    -accountRegistered$: BehaviorSubject<null>
    -accountUnRegistered$: BehaviorSubject<null>
    -accountsCount: number
    +accountRegistered: Observable<null>
    +accountUnRegistered: Observable<null>
    +registerAccount(): void
    +unRegisterAccount(): void
    +hasAccounts(): boolean
}
class Account {
    +id: number
    +platform: Platform
    +login: string
    +accessToken: string
    +tokenExpireDate: Date
    +profilePhoto: string
}
class AccountsComponent implements OnInit, OnDestroy {
    +platforms: typeof Platform
    -stream: Subscription
    +accounts: Account[]
    -authService: AuthService
    -tokenSvc: TokenService
    -spotifyInfo: SpotifyUserInfoService
    -ams: AccountMessageService
    +ngOnDestroy(): void
    +ngOnInit(): void
    +linkAccount_Click(platform: Platform): void
    +removeAccount_Click(platform: Platform): void
    -authSpotify(): void
    -authDeezer(): void
    +getAccountByPlatform(platformKey: string): Account
    +isPlatormExpanded(platformKey: string): boolean
}
class ActionsComponent implements OnInit {
    +ngOnInit(): void
}
interface NewPlaylistName {
    +platform: Platform
    +name: string
}
class CreatePlaylistDialogComponent implements OnInit {
    +platformSelectControl: FormControl
    +plsNameInputControl: FormControl
    +platforms: typeof Platform
    +dialogRef: MatDialogRef<CreatePlaylistDialogComponent, any>
    +data: NewPlaylistName
    +ngOnInit(): void
    +cancel(): void
}
class PlaylistsComponent implements OnInit {
    +playlists: Observable<UIPlaylist[]>
    +lovedTracksSpotify: UIPlaylist
    -tsms: TracksShowMessageService
    -spotyInfo: SpotifyUserInfoService
    -ams: AccountMessageService
    -dialog: MatDialog
    -notify: MatSnackBar
    +ngOnInit(): void
    -refreshPlaylists(): Observable<UIPlaylist[]>
    +createPlaylist(): void
    -createPlaylistOnPlatform(data: NewPlaylistName): void
    +selectPlaylist(pls: UIPlaylist): void
    +isNeedShow(): boolean
}
class AccountComponent implements OnInit {
    +account: any
    +ngOnInit(): void
}
class UITrack {
    +isFavourite: boolean
    +id: string
    +image: string
    +name: string
    +artist: string
    +album: string
    +length: string
    +uri: string
    +{static} createFromSpotifyRawData(rawData: TrackObjectFull, isFav: boolean): UITrack
    -{static} getArtists(artists: any): any
    -{static} shorten(source: string, length: number): string
    -{static} getLength(length: number): string
}
class TracksComponent implements OnInit {
    +infinite: Observable<UITrack[]>
    -viewport: CdkVirtualScrollViewport
    -offset: BehaviorSubject<number>
    -curOffset: number
    -limit: number
    -batchSize: number
    -msg: ShowTracksMessage<UIPlaylist>
    -pms: TracksShowMessageService
    -spotyInfo: SpotifyUserInfoService
    -notify: MatSnackBar
    +ngOnInit(): void
    +nextBatch(e: any): void
    +toggleFavourite(track: UITrack): void
    +getEditablePls(): Observable<UIPlaylist[]>
    +addTrackToPls(uri: string, pls: UIPlaylist): void
    -handleMessage(msg: ShowTracksMessage<UIPlaylist>): void
    -initSearchResultLoad(): void
    -initPlaylistLoad(platform: Platform, pls: UIPlaylist): void
    -getBatch(n: number, platform: Platform, pls: UIPlaylist): Observable<UITrack[]>
    -getSpotifyBatch(offset: number, pls: UIPlaylist): Observable<UITrack[]>
}
class WizardComponent implements OnInit {
    +ngOnInit(): void
}
class HelloComponent implements OnInit {
    +ngOnInit(): void
}
class BatchSplitPipe<T> implements PipeTransform {
    +transform(value: T[]): T[][]
}
class AppModule
class SpotifyTrackUI {
    +isFavourite: boolean
    +id: string
    +image: string
    +name: string
    +artist: string
    +album: string
    +length: string
    +uri: string
}
@enduml